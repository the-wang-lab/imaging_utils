# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: -all
#     custom_cell_magics: kql
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.11.2
#   kernelspec:
#     display_name: suite2p
#     language: python
#     name: python3
# ---

# %%
import numpy as np
from pathlib import Path


import suite2p
import utils as utl

# %% [markdown]
# # requirements
#
# Reading the `ROI.zip` file generated by ImageJ 
# requires the 
# [`read-roi`](https://pypi.org/project/read-roi/) and 
# [`scikit-image`](https://scikit-image.org/docs/stable/user_guide/install.html)
# package to be installed in the `suite2p` environment.
# This can be done by running the following commands in the conda terminal:
#
# ```
# conda activate suite2p
# pip install read-roi scikit-image
# ```
#
# # Define paths

# %%
# location of suite2p folder
p_s2p = Path("/home/nico/local/data/suite2p_data/test_tiff/suite2p/plane0/")
p_ops = p_s2p / "ops.npy"
p_data = p_s2p / "data.bin"

# output folder
p_out = p_s2p / 'imagej_rois'

# ImageJ Roi.zip file
p_roi = "/home/nico/local/data/fly_ca_imaging/RoiSet.zip"

# %% [markdown]
# # generate custom stats dict

# %%
# load ops file
ops = np.load(p_ops, allow_pickle=True).item()
Lx, Ly = ops["Lx"], ops["Ly"]

# load imagej rois
rois = utl.read_imagej_rois(p_roi, (Ly, Lx))

# generate stats
stat = []
for roi in rois:
    ypix, xpix = np.nonzero(roi)
    npix = len(ypix)
    stat.append(
        {
            "ypix": ypix,
            "xpix": xpix,
            "npix": npix,
            "lam": np.ones(npix, np.float32),
            "med": [np.mean(ypix), np.mean(xpix)],
        }
    )
stat = np.array(stat)

# This function fills in remaining roi properties
# to make it compatible with the rest of the suite2p pipeline/GUI
stat = suite2p.detection.roi_stats(stat, Ly, Lx)

# %% [markdown]
# # Run suite2p with custom ROI masks

# %%
# load data
f_reg = suite2p.io.BinaryFile(Ly, Lx, p_data)

# Feed these values into the wrapper functions
stat, F, Fneu, F_chan2, Fneu_chan2 = suite2p.extraction_wrapper(
    stat, f_reg, f_reg_chan2=None, ops=ops
)

# Do cell classification
classfile = suite2p.classification.builtin_classfile
iscell = suite2p.classify(stat=stat, classfile=classfile)

# Apply preprocessing step for deconvolution
dF = F.copy() - ops["neucoeff"] * Fneu
dF = suite2p.extraction.preprocess(
    F=dF,
    baseline=ops["baseline"],
    win_baseline=ops["win_baseline"],
    sig_baseline=ops["sig_baseline"],
    fs=ops["fs"],
    prctile_baseline=ops["prctile_baseline"],
)
# Identify spikes
spks = suite2p.extraction.oasis(
    F=dF, batch_size=ops["batch_size"], tau=ops["tau"], fs=ops["fs"]
)

# write files to `p_out`
p_out.mkdir(exist_ok=True)
np.save(p_out / "F.npy", F)
np.save(p_out / "Fneu.npy", Fneu)
np.save(p_out / "iscell.npy", iscell)
np.save(p_out / "ops.npy", ops)
np.save(p_out / "spks.npy", spks)
np.save(p_out / "stat.npy", stat)

# %% [markdown]
# # create suite2p outputs

# %%
